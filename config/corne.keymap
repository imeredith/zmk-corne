/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        windowswap: windowswap {
            compatible = "zmk,behavior-smart-toggle";
            label = "WINDOWSWAP";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;

            ignored-key-positions = <1>;
        };

        swap: swapper {
            compatible = "zmk,behavior-smart-toggle";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;

            ignored-key-positions = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lessthan {
            bindings = <&kp LESS_THAN>;
            key-positions = <14 15>;
            require-prior-idle-ms = <150>;
            timeout-ms = <30>;
        };

        greaterthan {
            bindings = <&kp GREATER_THAN>;
            key-positions = <15 16>;
            require-prior-idle-ms = <150>;
            timeout-ms = <30>;
        };

        lbrac {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 27>;
            require-prior-idle-ms = <150>;
            timeout-ms = <30>;
        };

        rbrac {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <27 28>;
            require-prior-idle-ms = <150>;
            timeout-ms = <30>;
        };

        lpar {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
        };

        rpar {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <20 21>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
        };

        lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <32 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
        };

        rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp F  &kp P           &kp B    &kp J  &kp L      &kp U        &kp Y       &key_repeat       &none
&none  &kp A  &kp R  &kp S  &kp T           &kp G    &kp M  &kp N      &kp E        &kp I       &kp O             &none
&none  &kp Z  &kp X  &kp C  &kp D           &kp V    &kp K  &kp H      &comma_semi  &dot_colon  &kp SINGLE_QUOTE  &none
                     &mo 2  &kp LEFT_SHIFT  &mo 3    &mo 1  &kp SPACE  &mo 4
            >;
        };

        sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp GRAVE  &kp LBKT      &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp TILDE        &kp CARET         &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp PERCENT      &trans
&trans  &kp MINUS  &kp ASTERISK  &kp EQUAL       &kp UNDERSCORE        &kp DOLLAR       &kp HASH          &sk LSHFT              &sk LGUI         &sk LALT           &sk LCTRL        &trans
&trans  &kp PLUS   &kp PIPE      &kp AT          &kp SLASH             &kp LESS_THAN    &kp GREATER_THAN  &kp BACKSLASH          &kp AMPERSAND    &kp QUESTION       &kp EXCLAMATION  &trans
                                 &trans          &kp ENTER             &trans           &trans            &trans                 &trans
            >;
        };

        nav-alt {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &trans         &trans     &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp ESCAPE  &kp BACKSPACE  &kp ENTER  &trans  &kp TAB  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &trans         &trans     &trans  &trans   &trans
                        &trans  &trans  &trans    &trans      &trans         &trans
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp TAB    &swap        &sk LS(LA(LCTRL))  &sk LS(LA(LC(LGUI)))  &kp LG(LC(LS(LA(Z))))    &trans    &trans         &kp UP    &trans        &kp DEL    &trans
&trans  &sk LCTRL  &sk LALT     &sk LGUI           &sk LSHFT             &kp LA(LC(LS(LG(X))))    &kp CAPS  &kp LEFT       &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &kp ESC    &windowswap  &kp BACKSPACE      &mo 6                 &trans                   &trans    &trans         &trans    &kp RET       &trans     &trans
                                &trans             &trans                &trans                   &trans    &kp BACKSPACE  &trans
            >;
        };

        num {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans     &trans    &trans    &trans     &trans
&trans  &kp N0  &kp N4  &kp N5  &kp N6  &trans    &trans  &sk LSHFT  &sk LGUI  &sk LALT  &sk LCTRL  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans     &trans    &trans    &trans     &trans
                        &trans  &trans  &trans    &trans  &trans     &trans
            >;
        };

        fn {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10    &trans  &trans     &trans    &trans    &trans     &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &sk LSHFT  &sk LGUI  &sk LALT  &sk LCTRL  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &trans  &trans     &trans    &trans    &trans     &trans
                        &trans  &trans  &trans     &trans  &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans      &trans        &trans        &trans        &trans          &trans    &trans    &trans  &trans     &trans  &trans
&trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans      &trans        &trans        &trans        &trans          &trans    &trans    &trans  &trans     &trans  &trans
                                  &trans        &trans        &trans          &trans    &trans    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fn {
            if-layers = <1 3>;
            then-layer = <5>;
        };
    };
};
